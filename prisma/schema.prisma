// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "rhel-openssl-1.0.x", "darwin"]
}

generator prisma {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin", "debian-openssl-1.1.x", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserType {
  normalUser
  admin
  superAdmin
}

model User {
  id            String    @id @default(cuid())
  //username not required in auth process
  username      String    @unique
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  type       UserType @default(normalUser)
  admin      Admin?
  normalUser NormalUser?
  superAdmin SuperAdmin?

  userCourses UserCourse[]

  @@map("users")
}

model NormalUser {
  user   User   @relation(fields: [userId], references: [id])
  userId String @id

  @@map("normalUsers")
}

model Admin {
  user   User   @relation(fields: [userId], references: [id])
  userId String @id

  createdCourses Course[]

  @@map("admins")
}

model SuperAdmin {
  user   User   @relation(fields: [userId], references: [id])
  userId String @id

  @@map("superAdmins")
}

model UserCourse {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  progress   Int
  correctQns Int
  stars      Int

  @@unique([userId, courseId])
  @@map("userCourses")
}

model Category {
  id          String @id @default(cuid())
  name        String
  description String

  childrenCategories Subcategory[]
}

model Subcategory {
  id          String @id @default(cuid())
  name        String
  description String

  parentCategory   Category @relation(fields: [parentCategoryId], references: [id])
  parentCategoryId String

  courses Course[]
}

enum CourseStatus {
  DRAFT
  APPROVED
  ARCHIVED
}

model Course {
  id            String       @id @default(cuid())
  name          String       @unique
  description   String
  stars         Int
  createdBy     Admin        @relation(fields: [adminId], references: [userId])
  adminId       String
  subcategory   Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId String? // null means misc.
  price         Decimal      @db.Decimal(5, 2)
  status        CourseStatus @default(DRAFT)

  userCourses UserCourse[]

  courseItems CourseItem[]

  @@map("courses")
}

enum CourseItemType {
  game
  image
  video
  article
}

model CourseItem {
  id          String @id @default(cuid())
  name        String
  description String
  pageNumber  Int

  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  type    CourseItemType
  game    Game?
  image   Image?
  video   Video?
  article Article?

  @@map("courseItems")
}

model Image {
  id           String      @id @default(cuid())
  courseItem   CourseItem? @relation(fields: [courseItemId], references: [id])
  courseItemId String?     @unique
  url          String

  @@map("images")
}

model Video {
  id           String     @id @default(cuid())
  courseItem   CourseItem @relation(fields: [courseItemId], references: [id])
  courseItemId String     @unique
  url          String

  @@map("videos")
}

model Article {
  id           String     @id @default(cuid())
  courseItem   CourseItem @relation(fields: [courseItemId], references: [id])
  courseItemId String     @unique
  text         String     @db.Text

  @@map("articles")
}

enum GameType {
  spotTheDifferenceGame
  matchingGame
  sortingGame
}

model Game {
  id           String     @id @default(cuid())
  courseItem   CourseItem @relation(fields: [courseItemId], references: [id])
  courseItemId String     @unique

  type                  GameType
  spotTheDifferenceGame SpotTheDifferenceGame?
  matchingGame          MatchingGame?
  sortingGame           SortingGame?

  @@map("games")
}

model SpotTheDifferenceGame {
  id     String @id @default(cuid())
  game   Game   @relation(fields: [gameId], references: [id])
  gameId String @unique
}

model MatchingGame {
  id     String @id @default(cuid())
  game   Game   @relation(fields: [gameId], references: [id])
  gameId String @unique
}

model SortingGame {
  id     String @id @default(cuid())
  game   Game   @relation(fields: [gameId], references: [id])
  gameId String @unique
}
