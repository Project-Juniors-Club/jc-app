generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "rhel-openssl-1.0.x", "darwin"]
}

generator prisma {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin", "debian-openssl-1.1.x", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String       @id @default(cuid())
  email         String       @unique
  type          UserType     @default(normalUser)
  emailVerified DateTime?
  password      String?
  image         String?
  name          String?
  age           Int?
  dob           DateTime?
  pdpa          Boolean      @default(false)
  accounts      Account[]
  sessions      Session[]
  admin         Admin?
  normalUser    NormalUser?
  userCourses   UserCourse[]
  coursesInCart Course[]     @relation("CoursesInCart")
  deleted       Boolean?      @default(false)

  @@map("users")
}

model NormalUser {
  userId String @id
  user   User   @relation(fields: [userId], references: [id])

  @@map("normalUsers")
}

model Admin {
  userId         String         @id
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdCourses Course[]       @relation("createdBy")
  updatedCourses Course[]       @relation("updatedBy")
  courseEditor   CourseEditor[]
  disabled       Boolean        @default(true)
  role           String         @default("Staff")

  @@map("admins")
}

model CourseEditor {
  id       String @id @default(cuid())
  courseId String
  adminId  String
  course   Course @relation(fields: [courseId], references: [id])
  admin    Admin  @relation(fields: [adminId], references: [userId])

  @@unique([adminId, courseId])
  @@map("courseEditors")
}

model UserCourse {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  progress   Int
  correctQns Int
  stars      Int
  course     Course   @relation(fields: [courseId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  lastSeenBy DateTime

  @@unique([userId, courseId])
  @@map("userCourses")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String
  courses     Course[]
}

model Course {
  id                 String         @id @default(cuid())
  title              String
  description        String
  learningObjectives String
  price              Decimal        @db.Decimal(5, 2)
  creatorId          String
  createDate         DateTime       @default(now())
  lastUpdatedUserId  String
  lastUpdatedDate    DateTime       @updatedAt
  coverImage         Image?         @relation(fields: [coverImageAssetId], references: [assetId])
  status             CourseStatus   @default(DRAFT)
  categoryId         String?
  createdBy          Admin          @relation("createdBy", fields: [creatorId], references: [userId])
  lastUpdatedBy      Admin          @relation("updatedBy", fields: [lastUpdatedUserId], references: [userId])
  category           Category?      @relation(fields: [categoryId], references: [id])
  chapters           Chapter[]
  userCourses        UserCourse[]
  courseEditor       CourseEditor[]
  coverImageAssetId  String?
  users              User[]         @relation("CoursesInCart")

  @@map("courses")
}

model Chapter {
  id            String @id @default(cuid())
  name          String
  description   String
  courseId      String
  chapterNumber Int
  course        Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  pages         Page[]

  @@map("chapters")
}

model Page {
  id          String   @id @default(cuid())
  name        String
  pageNumber  Int
  description String?
  duration    Int
  chapterId   String?
  chapter     Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  assetId     String   @unique
  asset       Asset    @relation(fields: [assetId], references: [id])

  @@map("pages")
}

model Asset {
  id        String    @id @default(cuid())
  assetType AssetType
  article   Article?
  game      Game?
  image     Image?
  video     Video?
  page      Page?

  @@map("assets")
}

model Image {
  filename String?
  url      String
  key      String?
  assetId  String  @id
  asset    Asset   @relation(fields: [assetId], references: [id], onDelete: Cascade)

  spotTheDifferenceGameLeft  SpotTheDifferenceGame? @relation("LeftImage")
  spotTheDifferenceGameRight SpotTheDifferenceGame? @relation("RightImage")
  Course                     Course[]
  SortingGameObject          SortingGameObject[]
  QuizGameQuestion           QuizGameQuestion[]
  QuizGameOption             QuizGameOption[]
  MatchingGameImage          MatchingGameImage?

  @@map("images")
}

model Video {
  filename String?
  url      String
  key      String?
  assetId  String  @id
  asset    Asset   @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@map("videos")
}

model Article {
  text    String
  assetId String @id
  asset   Asset  @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@map("articles")
}

model Game {
  type                  GameType
  assetId               String                 @id
  asset                 Asset                  @relation(fields: [assetId], references: [id], onDelete: Cascade)
  matchingGame          MatchingGame?
  spotTheDifferenceGame SpotTheDifferenceGame?
  QuizGame              QuizGame?
  SortingGame           SortingGame?

  @@map("games")
}

model SpotTheDifferenceGame {
  gameId String @id
  game   Game   @relation(fields: [gameId], references: [assetId], onDelete: Cascade)

  leftImage    Image   @relation("LeftImage", fields: [leftImageId], references: [assetId])
  leftImageId  String  @unique
  rightImage   Image   @relation("RightImage", fields: [rightImageId], references: [assetId])
  rightImageId String  @unique
  differences  SpotTheDifferenceRegion[]
}

model SpotTheDifferenceRegion {
  id           String    @id @default(cuid())
  x            Float
  y            Float
  width        Float
  height       Float
  game         SpotTheDifferenceGame @relation(fields: [gameId], references: [gameId])
  gameId       String
}

model MatchingGame {
  gameId   String              @id
  game     Game                @relation(fields: [gameId], references: [assetId], onDelete: Cascade)
  duration Float
  images   MatchingGameImage[]
}

model MatchingGameImage {
  id String @id @default(cuid())

  index Int

  image   Image  @relation(fields: [imageId], references: [assetId])
  imageId String @unique

  matchingGame   MatchingGame @relation(fields: [matchingGameId], references: [gameId], onDelete: Cascade)
  matchingGameId String
}

model QuizGame {
  gameId String @id
  game   Game   @relation(fields: [gameId], references: [assetId], onDelete: Cascade)

  quizGameQuestions QuizGameQuestion[]
}

model QuizGameQuestion {
  id String @id @default(cuid())

  questionNumber     Int
  isMultipleResponse Boolean
  questionTitle      String

  image   Image?  @relation(fields: [imageId], references: [assetId])
  imageId String?

  quizGameOptions QuizGameOption[]

  quizGame   QuizGame @relation(fields: [quizGameId], references: [gameId], onDelete: Cascade)
  quizGameId String
}

model QuizGameOption {
  id                 String             @id @default(cuid())
  isCorrectOption    Boolean
  quizGameOptionType QuizGameOptionType

  optionText String?

  optionImage   Image?  @relation(fields: [optionImageId], references: [assetId])
  optionImageId String?

  quizGameQuestion   QuizGameQuestion @relation(fields: [quizGameQuestionId], references: [id], onDelete: Cascade)
  quizGameQuestionId String
}

enum QuizGameOptionType {
  text
  image
  textAndImage
}

model SortingGame {
  gameId String @id
  game   Game   @relation(fields: [gameId], references: [assetId], onDelete: Cascade)

  description String

  sortingGameBuckets SortingGameBucket[]
}

model SortingGameBucket {
  id String @id @default(cuid())

  description String

  sortingGameObjects SortingGameObject[]

  sortingGame   SortingGame? @relation(fields: [sortingGameId], references: [gameId])
  sortingGameId String?
}

model SortingGameObject {
  id String @id @default(cuid())

  objectType SortingGameObjectType

  text String?

  image   Image?  @relation(fields: [imageId], references: [assetId], onDelete: Cascade)
  imageId String?

  correctBucket   SortingGameBucket @relation(fields: [correctBucketId], references: [id])
  correctBucketId String
}

enum SortingGameObjectType {
  text
  image
}

enum UserType {
  normalUser
  admin
  courseEditor
  staff
}

enum CourseStatus {
  DRAFT
  APPROVED
  ARCHIVED
}

enum AssetType {
  game
  image
  video
  article
}

enum GameType {
  spotTheDifferenceGame
  matchingGame
  sortingGame
  quizGame
}
