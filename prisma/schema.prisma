// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "rhel-openssl-1.0.x", "darwin"]
}

generator prisma {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin", "debian-openssl-1.1.x", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  normalUser
  admin
  superAdmin
}

model User {
  id       String @id @default(cuid())
  username String @unique
  password String
  email    String @unique

  passwordResetToken      String?   @unique
  passwordResetExpiryDate DateTime?

  type       UserType
  admin      Admin?
  normalUser NormalUser?
  superAdmin SuperAdmin?

  userCourses UserCourse[]

  @@index([passwordResetToken])
  @@map("users")
}

model NormalUser {
  user   User   @relation(fields: [userId], references: [id])
  userId String @id

  @@map("normalUsers")
}

model Admin {
  user   User   @relation(fields: [userId], references: [id])
  userId String @id

  createdCourses Course[]

  @@map("admins")
}

model SuperAdmin {
  user   User   @relation(fields: [userId], references: [id])
  userId String @id

  @@map("superAdmins")
}

model UserCourse {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  progress   Int
  correctQns Int
  stars      Int

  @@unique([userId, courseId])
  @@map("userCourses")
}

model Course {
  id          String @id @default(cuid())
  name        String @unique
  description String
  stars       Int
  createdBy   Admin  @relation(fields: [adminId], references: [userId])
  adminId     String

  userCourses UserCourse[]

  courseItems CourseItem[]

  @@map("courses")
}

enum AssetType {
  game
  image
  video
  article
}

model CourseItem {
  id          String @id @default(cuid())
  name        String
  description String
  pageNumber  Int

  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  @@map("courseItems")
}

model Asset {
  id String @id @default(cuid())

  assetType AssetType
  game      Game?
  video     Video?
  article   Article?
  Image     Image?
}

model Image {
  assetId String @id
  Asset   Asset  @relation(fields: [assetId], references: [id])

  url String

  @@map("images")
}

model Video {
  assetId String @id
  Asset   Asset  @relation(fields: [assetId], references: [id])

  url String

  @@map("videos")
}

model Article {
  assetId String @id
  Asset   Asset  @relation(fields: [assetId], references: [id])

  text String @db.Text

  @@map("articles")
}

enum GameType {
  spotTheDifferenceGame
  matchingGame
  sortingGame
}

model Game {
  assetId String @id
  Asset   Asset  @relation(fields: [assetId], references: [id])

  type                  GameType
  spotTheDifferenceGame SpotTheDifferenceGame?
  matchingGame          MatchingGame?
  sortingGame           SortingGame?

  @@map("games")
}

model SpotTheDifferenceGame {
  id     String @id @default(cuid())
  game   Game   @relation(fields: [gameId], references: [assetId])
  gameId String @unique
}

model MatchingGame {
  id     String @id @default(cuid())
  game   Game   @relation(fields: [gameId], references: [assetId])
  gameId String @unique
}

model SortingGame {
  id     String @id @default(cuid())
  game   Game   @relation(fields: [gameId], references: [assetId])
  gameId String @unique
}
